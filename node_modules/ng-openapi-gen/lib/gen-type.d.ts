import { ReferenceObject, SchemaObject } from 'openapi3-ts';
import { Import } from './imports';
import { Options } from './options';
/**
 * Base definitions of a generated type
 */
export declare abstract class GenType {
    name: string;
    /** Generation options */
    options: Options;
    /** Name of the generated type / class */
    typeName: string;
    /** Namespace, separated by '/' */
    namespace?: string;
    /** Camel-case qualified name of the type, including namespace */
    qualifiedName: string;
    /** Name of the generated file */
    fileName: string;
    /** TypeScript comments for this type */
    tsComments: string;
    imports: Import[];
    private _imports;
    additionalDependencies: string[];
    private _additionalDependencies;
    constructor(name: string, typeNameTransform: (typeName: string, options: Options) => string, 
    /** Generation options */
    options: Options);
    protected addImport(name: string): void;
    protected abstract skipImport(name: string): boolean;
    protected updateImports(): void;
    protected collectImports(schema: SchemaObject | ReferenceObject | undefined, additional?: boolean, processOneOf?: boolean): void;
    /**
     * Must be implemented to return the relative path to the models, ending with `/`
     */
    protected abstract pathToModels(): string;
}
